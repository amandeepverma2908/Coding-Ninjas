
public class solution {
	
	long solve(int A[],int n)
	{
    	long ans=mergesort(A,0,n-1);
    	return ans;
	}
	long mergesort(int A[],int l,int r)
	{
    	int c=0;
    	if(r>l)
    	{
        	int mid=l+(r-l)/2;
        	long leftcount=mergesort(A,l,mid);
        	long rightcount=mergesort(A,mid+1,r);
        	long concat=merge(A,l,mid+1,r);
        	return concat+leftcount+rightcount;
    	}
    	return c;
	}
	long merge(int A[],int l,int mid,int r)
	{
    	int i=l,j=mid,k=0;
        long c=0;
    	int temp[]=new int[r-l+1];
    	while(i<mid&&j<=r)
    	{
        	if(A[i]<=A[j])
        	{
            	temp[k++]=A[i++];
        	}
        	else{
            	temp[k++]=A[j++];
            	c+=mid-i;
        	}
    	}
    	while(i<mid)
    	{
        	temp[k++]=A[i++];
    	}
    	while(j<=r)
    	{
        	temp[k++]=A[j++];
    	}
    	for(i=l,k=0;i<=r;i++,k++)
    	{
        	A[i]=temp[k];
    	}
    	return c;
	}
	
}
